---
name: 'Test and deploy'

on: [push, pull_request]

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

jobs:
  verify-version:
    name: Verify VERSION has changed
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: tj-actions/verify-changed-files@v13
        id: verify-changed-version
        with:
          files: |
            VERSION
      - if: steps.verify-changed-version.outputs.files_changed == 'false'
        run: |
          exit 1
  go-versions:
    name: Lookup go versions
    runs-on: ubuntu-latest
    if: (github.event_name == 'pull_request' || github.ref == 'refs/heads/master')
    outputs:
      matrix: ${{ steps.versions.outputs.matrix }}
    steps:
    - uses: actions/checkout@v3
    - uses: arnested/go-version-action@v1
      id: versions
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: go-versions
    if: (github.event_name == 'pull_request' || github.ref == 'refs/heads/master')
    strategy:
      matrix:
        version: ${{ fromJSON(needs.go-versions.outputs.matrix) }}
    steps:
    - uses: actions/checkout@v3
    - name: Install Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ matrix.version }}
        check-latest: true
    - name: go test
      run: go test -v ./...
  docker:
    name: Build docker images
    runs-on: ubuntu-latest
    needs: [test]
    if: (github.event_name == 'pull_request' || github.ref == 'refs/heads/master')
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=${{ secrets.DOCKER_HUB_USERNAME }}/${GITHUB_REPOSITORY#*/}
          SHORTREF=${GITHUB_SHA::8}
          if [[ ${{github.ref}} != 'refs/heads/master' ]]; then
            VERSION='dev'
            TAGS="${DOCKER_IMAGE}:${VERSION},${DOCKER_IMAGE}:${SHORTREF}"
          else
            VERSION=`cat VERSION`
            TAGS="${DOCKER_IMAGE}:${VERSION},${DOCKER_IMAGE}:${SHORTREF},${DOCKER_IMAGE}:latest"
          fi

          # Set output parameters.
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=docker_image::${DOCKER_IMAGE}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.prep.outputs.tags }}
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [docker]
    if: (github.event_name == 'push' && github.ref == 'refs/heads/master')
    steps:
      - uses: actions/checkout@v3
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: flyctl deploy --remote-only --no-cache --config deployment/fly.io/fly.toml