---
name: 'build images'

on: [push, pull_request]

jobs:
  # go-versions:
  #   name: Lookup go versions
  #   runs-on: ubuntu-latest
  #   outputs:
  #     matrix: ${{ steps.versions.outputs.matrix }}
  #   steps:
  #   - uses: actions/checkout@v3
  #   - uses: arnested/go-version-action@v1
  #     id: versions
  # test:
  #   name: Test
  #   runs-on: ubuntu-latest
  #   needs: go-versions
  #   strategy:
  #     matrix:
  #       version: ${{ fromJSON(needs.go-versions.outputs.matrix) }}
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Install Go
  #     uses: actions/setup-go@v3
  #     with:
  #       go-version: ${{ matrix.version }}
  #       check-latest: true
  #   - name: go test
  #     run: go test -v ./...
  docker:
    name: Build docker images
    runs-on: ubuntu-latest
    # needs: [test]
    if: github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=${{ secrets.DOCKER_HUB_USERNAME }}/${GITHUB_REPOSITORY#*/}
          SHORTREF=${GITHUB_SHA::8}

          if [[ ${{github.ref}} != 'refs/heads/master' ]]; then
            VERSION='dev'
            TAGS="${DOCKER_IMAGE}:${VERSION},${DOCKER_IMAGE}:${SHORTREF}"
          else
            VERSION=`cat VERSION`
            TAGS="${DOCKER_IMAGE}:${VERSION},${DOCKER_IMAGE}:${SHORTREF},${DOCKER_IMAGE}:latest"
          fi

          # Set output parameters.
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=docker_image::${DOCKER_IMAGE}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Build
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          platforms: linux/arm64
          push: true
          tags: ${{ steps.prep.outputs.tags }}
